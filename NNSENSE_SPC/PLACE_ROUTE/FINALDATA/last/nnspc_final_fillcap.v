/*
###############################################################
#  Generated by:      Cadence Innovus 15.28-s017_1
#  OS:                Linux x86_64(Host ID s2424.it.kth.se)
#  Generated on:      Mon Aug 28 16:33:38 2017
#  Design:            nnspc
#  Command:           saveNetlist ../FINALDATA/last/nnspc_final_fillcap.v -excludeLeafCell -includePhysicalInst -excludeCellInst { FILLCELLX32 FILLCELLX16 FILLCELLX8 FILLCELLX4 FILLCELLX2 FILLCELLX1  }
###############################################################
*/
module nnspc (
	Cfg_in, 
	Clk, 
	Resetn, 
	NSEL, 
	DAC, 
	RE);
   input Cfg_in;
   input Clk;
   input Resetn;
   output [4:0] NSEL;
   output [3:0] DAC;
   output RE;

   // Internal wires
   wire FE_OFN0_Resetn;
   wire CTS_4;
   wire [4:0] count;
   wire [9:0] out;
   wire UNCONNECTED;
   wire UNCONNECTED0;
   wire UNCONNECTED1;
   wire UNCONNECTED2;
   wire UNCONNECTED3;
   wire UNCONNECTED4;
   wire UNCONNECTED5;
   wire UNCONNECTED6;
   wire UNCONNECTED7;
   wire UNCONNECTED8;
   wire UNCONNECTED9;
   wire UNCONNECTED10;
   wire UNCONNECTED11;
   wire UNCONNECTED12;
   wire UNCONNECTED13;
   wire UNCONNECTED14;
   wire UNCONNECTED15;
   wire UNCONNECTED16;
   wire UNCONNECTED17;
   wire UNCONNECTED18;
   wire UNCONNECTED19;
   wire UNCONNECTED20;
   wire UNCONNECTED21;
   wire UNCONNECTED22;
   wire n_0;
   wire n_1;
   wire n_2;
   wire n_3;
   wire n_4;
   wire n_5;
   wire n_6;
   wire n_7;
   wire n_8;
   wire n_9;
   wire n_10;
   wire n_12;
   wire n_13;

   // Module instantiations
   NOR2XL g33 (
	.A(count[2]),
	.B(count[1]),
	.Q(n_13));
   NOR2XL g34 (
	.A(count[4]),
	.B(count[3]),
	.Q(n_12));
   NOR2XL g140 (
	.A(n_4),
	.B(count[3]),
	.Q(n_5));
   NOR2XL g144 (
	.A(n_0),
	.B(count[2]),
	.Q(n_2));
   INVXL g141 (
	.A(n_2),
	.Q(n_4));
   AO21X3 g143 (
	.A1(n_0),
	.A2(count[2]),
	.B1(n_2),
	.Q(n_3));
   DFCX1 \out_reg[0]  (
	.D(out[1]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[0]),
	.QN(UNCONNECTED1));
   DFCX1 \out_reg[1]  (
	.D(out[2]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[1]),
	.QN(UNCONNECTED3));
   DFCX1 \out_reg[2]  (
	.D(out[3]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[2]),
	.QN(UNCONNECTED5));
   DFCX1 \out_reg[3]  (
	.D(out[4]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[3]),
	.QN(UNCONNECTED7));
   DFCX1 \out_reg[4]  (
	.D(out[5]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[4]),
	.QN(UNCONNECTED9));
   DFCX1 \out_reg[5]  (
	.D(out[6]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[5]),
	.QN(UNCONNECTED11));
   DFCX1 \out_reg[6]  (
	.D(out[7]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[6]),
	.QN(UNCONNECTED15));
   DFCX1 \out_reg[7]  (
	.D(out[8]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[7]),
	.QN(UNCONNECTED16));
   DFCX1 \out_reg[8]  (
	.D(out[9]),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[8]),
	.QN(UNCONNECTED17));
   DFCX1 \out_reg[9]  (
	.D(Cfg_in),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(out[9]),
	.QN(UNCONNECTED18));
   DFCX1 \count_reg[4]  (
	.D(n_7),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(count[4]),
	.QN(UNCONNECTED19));
   DFCX1 \count_reg[2]  (
	.D(n_3),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(count[2]),
	.QN(UNCONNECTED21));
   DFCX1 \count_reg[0]  (
	.D(n_10),
	.RN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(count[0]),
	.QN(n_10));
   OR2X3 g147 (
	.A(count[1]),
	.B(count[0]),
	.Q(n_0));
   NAND3X1 g83 (
	.A(n_12),
	.B(n_13),
	.C(n_10),
	.Q(n_8));
   DFCX6 RE_reg (
	.D(out[0]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(RE),
	.QN(UNCONNECTED));
   DFCX6 \DAC_reg[0]  (
	.D(out[1]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(DAC[0]),
	.QN(UNCONNECTED0));
   DFCX6 \DAC_reg[1]  (
	.D(out[2]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(DAC[1]),
	.QN(UNCONNECTED2));
   DFCX6 \DAC_reg[2]  (
	.D(out[3]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(DAC[2]),
	.QN(UNCONNECTED4));
   DFCX6 \DAC_reg[3]  (
	.D(out[4]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(DAC[3]),
	.QN(UNCONNECTED6));
   DFCX6 \NSEL_reg[0]  (
	.D(out[5]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(NSEL[0]),
	.QN(UNCONNECTED8));
   DFCX6 \NSEL_reg[1]  (
	.D(out[6]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(NSEL[1]),
	.QN(UNCONNECTED10));
   DFCX6 \NSEL_reg[3]  (
	.D(out[8]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(NSEL[3]),
	.QN(UNCONNECTED12));
   DFCX6 \NSEL_reg[2]  (
	.D(out[7]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(NSEL[2]),
	.QN(UNCONNECTED13));
   DFCX6 \NSEL_reg[4]  (
	.D(out[9]),
	.RN(FE_OFN0_Resetn),
	.CP(n_9),
	.Q(NSEL[4]),
	.QN(UNCONNECTED14));
   DFPX3 \count_reg[3]  (
	.D(n_6),
	.SN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(count[3]),
	.QN(UNCONNECTED20));
   DFPX3 \count_reg[1]  (
	.D(n_1),
	.SN(FE_OFN0_Resetn),
	.CP(CTS_4),
	.Q(count[1]),
	.QN(UNCONNECTED22));
   CLKBUFX6 CTS_ccl_BUF_Clk_G0_L1_1 (
	.A(Clk),
	.Q(CTS_4));
   XOR2X1 g136 (
	.A(count[4]),
	.B(n_5),
	.Q(n_7));
   XOR2X1 g138 (
	.A(count[3]),
	.B(n_2),
	.Q(n_6));
   XOR2X1 g145 (
	.A(count[1]),
	.B(n_10),
	.Q(n_1));
   NOR2X6 g81 (
	.A(Clk),
	.B(n_8),
	.Q(n_9));
   CLKBUFX2 FE_OFC0_Resetn (
	.A(Resetn),
	.Q(FE_OFN0_Resetn));

   // Fillers and physical instances.
   FILLCAPX4 FILLERCAP_impl0_11 (
 );
   FILLCAPX8 FILLERCAP_impl0_10 (
 );
   FILLCAPX4 FILLERCAP_impl0_9 (
 );
   FILLCAPX16 FILLERCAP_impl0_8 (
 );
   FILLCAPX4 FILLERCAP_impl0_7 (
 );
   FILLCAPX4 FILLERCAP_impl0_6 (
 );
   FILLCAPX8 FILLERCAP_impl0_5 (
 );
   FILLCAPX16 FILLERCAP_impl0_4 (
 );
   FILLCAPX8 FILLERCAP_impl0_3 (
 );
   FILLCAPX16 FILLERCAP_impl0_2 (
 );
   FILLCAPX32 FILLERCAP_impl0_1 (
 );
endmodule

